function [object,ghost,background,spikes] = importROIs(roifName)

% importROIs
%
%     [object,ghost,background,spikes] = importROIs(roifName)
%
% Function to import the ROI locations from a file generated by
%   'roiCorners.m'
%  
% The text file roifName is supposed to have a fixed structure:
%
%     === ("type" or ROI) ===
%     i1, j1, k1   (indices for the first corner)
%     i2, j2, k2   (        for the oposite corner)
%     (blank line)
%     Next ROI
%     ...
% (See roiCorners.m for more details.)
%
% Dependencies: 
%   (none)
%
% PJV: v.1.0: January 2009

% PJV: v.1.0: January 2009
%   Created, from 'checkdataquality.m'



%% check arguments:

% if no 'roifName' is passed (or blank), return error.
if ( (nargin<1) || isempty(roifName) )
  error('You need to specify a "roifName".');
end
% if 'roifName' doesn't exist, return error:
if ~exist(roifName, 'file')
  error('ROI File not found.  Check the filename or run "roiCorners.m"');
end


%% define (fields of an empty) structure to hold the ROIs:
my_roi = struct('name', {}, ...
                'type', {}, ...
                'corner1', [], ...
                'corner2',[], ...
                'nvox',[], ...
                'meants',[], ...
                'stdts',[]);  

% open ROIs file:
fid = fopen(roifName,'r');


%% Loop through all the lines:

% initialize rois counters:
i_ob = 0;     % object
i_gh = 0;     % ghost
i_bk = 0;     % background
i_sp = 0;     % spike detection

while 1
  tline = fgetl(fid);
  if ~ischar(tline)   % it will read a -1 at the end-of-file
    break
  end
%   disp( tline );    % for debugging
  
  if ~isempty(tline)
    % go through the different possibilities:
    if strcmp(tline(1:2),'==')   % header of a section:
      roiType = lower( strtok(tline(5:end-4)) );
    elseif ~isempty( regexp(tline,'[^0-9,]','once') )
      % if there is anything different from number & commas
      
      roiName = regexp(tline, '\w*','match','once');
      
      % fill in fields in my_roi:
      my_roi(1).name = roiName;
      my_roi(1).type = roiType;
      
      % should be followed by two lines with the corner locations
      roiCorner1 = eval(['[' fgetl(fid) ']']);
      roiCorner2 = eval(['[' fgetl(fid) ']']);
      
      % sort each coordinate x,y,z so that corner1 is the min and corner2
      % the max (this way we never run intro problems in decreasing
      % indices):
      sortedCorners = sort([roiCorner1;roiCorner2]);
      my_roi(1).corner1 = sortedCorners(1,:);
      my_roi(1).corner2 = sortedCorners(2,:);
      % calculate the size of the ROI:
      my_roi.nvox = prod( my_roi(1).corner2 - my_roi(1).corner1 + 1 );
      
      % clasify my_roi depending on roi type:
      switch roiType
        case 'object'
          % increase the roi counter
          i_ob = i_ob + 1;
          object(i_ob) = my_roi(1);
        case 'ghost'
          % increase the roi counter
          i_gh = i_gh + 1;
          ghost(i_gh) = my_roi(1);
        case 'background'
          % increase the roi counter
          i_bk = i_bk + 1;
          background(i_bk) = my_roi(1);
        case 'spikes'
          % increase the roi counter
          i_sp = i_sp + 1;
          spikes(i_sp) = my_roi(1);
        otherwise
          warning( 'Unknown ROI type.\n' );
      end

    else
      error( ['Error parsing the ROI file: %s\n' ...
              'Try running again ''roiCorners.m''\n '],roifName);
    end
  end
end

% close ROIs file:
fclose(fid);